from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from func.states import PostState
from func.all_func import *
import os
from config.config import PENDING_POSTS_FILE, IMAGE_FOLDER
from aiogram import Bot
from aiogram.types import Message
from config.messages_list import BLACKLIST
from keyboards.keyboard import *

router = Router()

bot: Bot

def set_bot(bot_instance):
    global bot
    bot = bot_instance

@router.message(CommandStart())
async def start_handler(message: Message):
    if await is_user_blocked(message.from_user.id):
        await message.answer(BLACKLIST)
        return
    
    await message.answer(
        "‚≠ê –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª.\n\n"
        "<b>–ü—Ä–∞–≤–∏–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
        "–ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML:\n"
        "üìù <b>–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>: <code>&lt;b&gt;—Ç–µ–∫—Å—Ç&lt;/b&gt;</code>\n"
        "üìù <i>–ö—É—Ä—Å–∏–≤</i>: <code>&lt;i&gt;—Ç–µ–∫—Å—Ç&lt;/i&gt;</code>\n"
        "üìù <u>–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π</u>: <code>&lt;u&gt;—Ç–µ–∫—Å—Ç&lt;/u&gt;</code>\n"
        "üìù <s>–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π</s>: <code>&lt;s&gt;—Ç–µ–∫—Å—Ç&lt;/s&gt;</code>\n"
        "üìù <tg-spoiler>–°–ø–æ–π–ª–µ—Ä</tg-spoiler>: <code>&lt;tg-spoiler&gt;—Ç–µ–∫—Å—Ç&lt;/tg-spoiler&gt;</code>\n"
        "üìù <u><b>–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤</b></u>:  –º–æ–∂–Ω–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã, –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ <code>&lt;b&gt;&lt;u&gt;–∂–∏—Ä–Ω—ã–π –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π&lt;/u&gt;&lt;/b&gt;</code>\n\n"
        "\n‚úÖ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç –º–æ–∂–Ω–æ –Ω–µ —á–∞—â–µ 1 —Ä–∞–∑–∞ –≤ —á–∞—Å, –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=kb_offer_post()
    )

@router.message(F.text == "üì® –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç")
async def suggest_post_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"User {user_id} clicked 'suggest_post' button.")

    if await is_user_blocked(user_id):
        await message.answer(BLACKLIST)
        return

    can_post_bool, minutes, seconds = await can_post(user_id)
    if not can_post_bool:
        await message.answer(
            f"–í—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ—Å—Ç —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω. {seconds} —Å–µ–∫.", 
            reply_markup=kb_offer_post()
        )
        return

    # –û—á–∏—Å—Ç–∫–∞ state
    await state.clear()
    logging.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞.",
        reply_markup=kb_offer_post()
    )
    await state.set_state(PostState.waiting_for_post)


@router.message(PostState.waiting_for_post)
async def get_post_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text or ""
    photo = message.photo
    file_path = None

    if photo:
        file_id = photo[-1].file_id
        file = await bot.get_file(file_id)
        file_path = os.path.join(IMAGE_FOLDER, f"{file_id}.jpg")
        await bot.download_file(file.file_path, file_path)

    if user_id != ADMIN_ID:
        user_last_post_time[user_id] = datetime.now()

    pending_posts = await load_posts(PENDING_POSTS_FILE)
    new_post = {
        "user_id": user_id,
        "image": file_path,
        "text": text,
        "status": "pending",
        "admin_id": None,
    }

    pending_posts.append(new_post)
    await save_posts(pending_posts, PENDING_POSTS_FILE)


    if user_id == ADMIN_ID:
       await bot.send_message(ADMIN_ID, "–ü–æ—Å—Ç –æ—Ç –∞–¥–º–∏–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
    else:
       await bot.send_message(ADMIN_ID, f"–ü–æ—Å—Ç—É–ø–∏–ª–æ –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>")
       await message.answer("–í–∞—à –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.", reply_markup=kb_offer_post())
    await state.clear()